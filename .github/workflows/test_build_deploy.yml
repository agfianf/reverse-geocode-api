name: Test, Build, and Push ECR Image
on:
  pull_request:
    branches: [ main ]
  push:
    tags:
      - stg-v*
      - prod-v*

jobs:
  test:
    name: Test, Lint, and Format
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🐍 Install uv and set the python version
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"
          python-version: "3.12"

      - name: 📦 Install the project
        run: make install

      - name: 🔍 Checking linter
        run: make lint

      - name: 🔍 Checking Format
        run: make format

      - name: 📊 Run tests with Coverage
        run: make test

  build:
    name: Build and Push ECR Image
    runs-on: ubuntu-latest
    needs: test
    if: (github.event_name == 'push' && (startsWith(github.ref, 'refs/tags/stg-v') || startsWith(github.ref, 'refs/tags/prod-v')))
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push the image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
          IMAGE_TAG: ${{ github.ref_name }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.30.0
        with:
          image-ref: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.REPO_NAME }}:${{ github.ref_name }}
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
    outputs:
      ecr_registry: ${{ steps.login-ecr.outputs.registry }}

  deploy:
    name: Deploy to AWS ECS
    runs-on: ubuntu-latest
    needs: build
    env:
      ECR_REGISTRY: ${{ needs.build.outputs.ecr_registry }}
    if: (github.event_name == 'push' && (startsWith(github.ref, 'refs/tags/stg-v') || startsWith(github.ref, 'refs/tags/prod-v')))
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🚀 Deploy to EC2 via SSH
        env:
            PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
            HOSTNAME: ${{ secrets.SSH_HOST }}
            USER_NAME: ${{ secrets.SSH_USER_NAME }}
        run: |
          echo "$SSH_PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} '
            set -e
            # Check if project directory exists, clone if not
            if [ ! -d "${{ secrets.APP_PATH }}/.git" ]; then
              git clone ${{ github.repositoryUrl }} ${{ secrets.APP_PATH }}
            fi
            cd ${{ secrets.APP_PATH }}
            git fetch --all --tags
            git checkout ${{ github.ref_name }}
            git pull
            # Stop and remove running containers using the image
            docker ps --filter "ancestor=$ECR_REGISTRY/${{ secrets.REPO_NAME }}:${{ github.ref_name }}" -q | xargs -r docker stop
            docker ps -a --filter "ancestor=$ECR_REGISTRY/${{ secrets.REPO_NAME }}:${{ github.ref_name }}" -q | xargs -r docker rm
            # Pull latest changes
            git pull
            # Pull latest image
            docker pull $ECR_REGISTRY/${{ secrets.REPO_NAME }}:${{ github.ref_name }}
            # Remove old images (optional, keep only latest)
            docker image prune -f
            # Set env vars and run docker-compose.nginx.yml via Makefile
            export DOCKER_IMAGE=$ECR_REGISTRY/${{ secrets.REPO_NAME }}:${{ github.ref_name }}
            export REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
            # Run docker-compose
            docker-compose -f docker-compose.nginx.yml up -d
          '
